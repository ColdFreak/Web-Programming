AWS EC2にerlang 17パッケージをインストール時のエラー
$ rpm -ivh esl-erlang_17.1-1~centos~6_amd64.rpm
error: Failed dependencies:
        libGL.so.1()(64bit) is needed by esl-erlang-17.1-1.x86_64  => これはmesa-libGL-develをインストールすればよい
        libGLU.so.1()(64bit) is needed by esl-erlang-17.1-1.x86_64 => mesa-libGLU-devel.x86_64をインストールすればよい
        libodbc.so.2()(64bit) is needed by esl-erlang-17.1-1.x86_64 => unixODBC-devel.x86_64をインストールすればよい
        libwx_baseu-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64 				=> wxBase(Non-GUI support classes from the wxWidgets library)をインストール
        libwx_baseu-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64			=> wxBase
        libwx_baseu_xml-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64				=> wxBase
        libwx_gtk2u_adv-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_adv-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_aui-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_aui-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_aui-2.8.so.0(WXU_2.8.5)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_core-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_core-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_gl-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_gl-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_html-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_html-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_stc-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_stc-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_xrc-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_xrc-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64


ubuntu(32bit)にElixirをインストール
下のレポジトリを/etc/apt/sources.listファイルに追加
deb http://packages.erlang-solutions.com/ubuntu trusty contrib
deb http://packages.erlang-solutions.com/ubuntu saucy contrib
deb http://packages.erlang-solutions.com/ubuntu precise contrib
下のコマンドでerlang 17もインストールされる。
# aptitude update
# aptitude install elixir

Mac OS Xに最新のElixirをインストール
$ brew unlink elixir
Unlinking /usr/local/Cellar/elixir/0.13.0... 9 symlinks removed
$ brew install elixir --HEAD

Comprehensionsはgenerators, filters, collectables
三つの要素で構成されている
iex(11)> for n <- [1,2,3,4], do: n*n
[1, 4, 9, 16]
iex(12)> for n <- 1..4, do: n*n
[1, 4, 9, 16]


Regular expressions
iex(1)> regex = ~r/foo|bar/
~r"foo|bar"
iex(2)> "foo" =~ regex
true
iex(3)> "bar" =~ regex
true
iex(4)> "bat" =~ regex
false
iex(5)>

spawnされたプロセスは関数を実行して，
実行終了したら，プロセスもexit
iex(1)> pid = spawn fn -> 1+2 end
#PID<0.43.0>
iex(2)> Process.alive?(pid)
false
iex(3)>

defstructを使って，structを作ることができる

iex(1)> defmodule User do
...(1)>   defstruct name: "join", age: 27
...(1)> end

'instances'を生成するには%User{}を使う
iex(2)> %User{}
%User{age: 27, name: "join"}
iex(3)> %User{name: "meg"}
%User{age: 27, name: "meg"}
iex(6)> is_map(%User{})
true


iex(7)> join = %User{}
%User{age: 27, name: "join"}
iex(8)> join.name
"join"
iex(9)> join.age
27

megはjoinというインスタンスをアップデートした
iex(10)> meg = %User{join | name: "meg"}
%User{age: 27, name: "meg"}
iex(11)> meg.name
"meg"
iex(12)> join.name
"join"


無名関数,('.'に注意)
iex(1)> square = fn(x) -> x*x end
#Function<6.106461118/1 in :erl_eval.expr/5>
iex(2)> square.(5)
25

標準入力から入力を取得
iex(2)> IO.gets " yes or no?"
yes or no?yes
"yes\n"
iex(3)> IO.gets "yes or no? "
yes or no? yes
"yes\n"


標準エラーに出力
iex(4)> IO.puts :stderr, "hello world"
hello world
:ok


Fileモジュールを使ってファイルを開く
デフォルトではバイナリモードで開かれるので、
IO.binread/2 IO.binwrite/2関数を使う必要がある

$ iex
iex(1)> {:ok, file} = File.open "hello", [:write]
{:ok, #PID<0.44.0>}
iex(2)> IO.binwrite file, "world"
:ok
iex(3)> File.close file
:ok
iex(4)> File.read "hello"
{:ok, "world"}
iex(5)>


'!'のついていないFile.readはきちんとしたエラーをだすようにしている
パターンマッチングによくつかわれる
iex(1)> File.read "hello"
{:ok, "world"}
iex(2)> File.read! "hello"
"world"
iex(3)> File.read "unknown"
{:error, :enoent}
iex(4)> File.read! "unknown"
** (File.Error) could not read file unknown: no such file or directory
    (elixir) lib/file.ex:355: File.read!/1


下の二つは同じで，一つ目はfunction capture
英語で説明すると
& is a shorthand that lets you define an anonymous function,
you use &1, &2 to reference the arguments that the function receives
iex(2)> Enum.map [1,2,3], &(&1 * &1)
[1, 4, 9]
iex(3)> Enum.map [1,2,3], fn(x) -> x * x end
[1, 4, 9]
iex(4)>


二次元リストを Enum.at と'|>' で６という数字を特定することができる
iex(1)> multi_dim_array = [ [1,2,3], [4,5,6]]
[[1, 2, 3], [4, 5, 6]]
iex(2)> Enum.at(multi_dim_array, 1)
[4, 5, 6]
iex(3)> Enum.at(multi_dim_array, 1) |> Enum.at(2)
6
