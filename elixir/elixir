AWS EC2にerlang 17パッケージをインストール時のエラー
$ rpm -ivh esl-erlang_17.1-1~centos~6_amd64.rpm
error: Failed dependencies:
        libGL.so.1()(64bit) is needed by esl-erlang-17.1-1.x86_64  => これはmesa-libGL-develをインストールすればよい
        libGLU.so.1()(64bit) is needed by esl-erlang-17.1-1.x86_64 => mesa-libGLU-devel.x86_64をインストールすればよい
        libodbc.so.2()(64bit) is needed by esl-erlang-17.1-1.x86_64 => unixODBC-devel.x86_64をインストールすればよい
        libwx_baseu-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64 				=> wxBase(Non-GUI support classes from the wxWidgets library)をインストール
        libwx_baseu-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64			=> wxBase
        libwx_baseu_xml-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64				=> wxBase
        libwx_gtk2u_adv-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_adv-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_aui-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_aui-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_aui-2.8.so.0(WXU_2.8.5)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_core-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_core-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_gl-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_gl-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_html-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_html-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_stc-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_stc-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_xrc-2.8.so.0()(64bit) is needed by esl-erlang-17.1-1.x86_64
        libwx_gtk2u_xrc-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-17.1-1.x86_64


ubuntu(32bit)にElixirをインストール
下のレポジトリを/etc/apt/sources.listファイルに追加
deb http://packages.erlang-solutions.com/ubuntu trusty contrib
deb http://packages.erlang-solutions.com/ubuntu saucy contrib
deb http://packages.erlang-solutions.com/ubuntu precise contrib
下のコマンドでerlang 17もインストールされる。
# aptitude update
# aptitude install elixir

Mac OS Xに最新のElixirをインストール
$ brew unlink elixir
Unlinking /usr/local/Cellar/elixir/0.13.0... 9 symlinks removed
$ brew install elixir --HEAD

Comprehensionsはgenerators, filters, collectables
三つの要素で構成されている
iex(11)> for n <- [1,2,3,4], do: n*n
[1, 4, 9, 16]
iex(12)> for n <- 1..4, do: n*n
[1, 4, 9, 16]


Regular expressions
iex(1)> regex = ~r/foo|bar/
~r"foo|bar"
iex(2)> "foo" =~ regex
true
iex(3)> "bar" =~ regex
true
iex(4)> "bat" =~ regex
false
iex(5)>

spawnされたプロセスは関数を実行して，
実行終了したら，プロセスもexit
iex(1)> pid = spawn fn -> 1+2 end
#PID<0.43.0>
iex(2)> Process.alive?(pid)
false
iex(3)>

defstructを使って，structを作ることができる

iex(1)> defmodule User do
...(1)>   defstruct name: "join", age: 27
...(1)> end

'instances'を生成するには%User{}を使う
iex(2)> %User{}
%User{age: 27, name: "join"}
iex(3)> %User{name: "meg"}
%User{age: 27, name: "meg"}
iex(6)> is_map(%User{})
true


iex(7)> join = %User{}
%User{age: 27, name: "join"}
iex(8)> join.name
"join"
iex(9)> join.age
27

megはjoinというインスタンスをアップデートした
iex(10)> meg = %User{join | name: "meg"}
%User{age: 27, name: "meg"}
iex(11)> meg.name
"meg"
iex(12)> join.name
"join"


無名関数,('.'に注意)
iex(1)> square = fn(x) -> x*x end
#Function<6.106461118/1 in :erl_eval.expr/5>
iex(2)> square.(5)
25

標準入力から入力を取得
iex(2)> IO.gets " yes or no?"
yes or no?yes
"yes\n"
iex(3)> IO.gets "yes or no? "
yes or no? yes
"yes\n"


標準エラーに出力
iex(4)> IO.puts :stderr, "hello world"
hello world
:ok


Fileモジュールを使ってファイルを開く
デフォルトではバイナリモードで開かれるので、
IO.binread/2 IO.binwrite/2関数を使う必要がある

$ iex
iex(1)> {:ok, file} = File.open "hello", [:write]
{:ok, #PID<0.44.0>}
iex(2)> IO.binwrite file, "world"
:ok
iex(3)> File.close file
:ok
iex(4)> File.read "hello"
{:ok, "world"}
iex(5)>


'!'のついていないFile.readはきちんとしたエラーをだすようにしている
パターンマッチングによくつかわれる
iex(1)> File.read "hello"
{:ok, "world"}
iex(2)> File.read! "hello"
"world"
iex(3)> File.read "unknown"
{:error, :enoent}
iex(4)> File.read! "unknown"
** (File.Error) could not read file unknown: no such file or directory
    (elixir) lib/file.ex:355: File.read!/1


下の二つは同じで，一つ目はfunction capture
英語で説明すると
& is a shorthand that lets you define an anonymous function,
you use &1, &2 to reference the arguments that the function receives
iex(2)> Enum.map [1,2,3], &(&1 * &1)
[1, 4, 9]
iex(3)> Enum.map [1,2,3], fn(x) -> x * x end
[1, 4, 9]
iex(4)>


二次元リストを Enum.at と'|>' で
６という数字を特定することができる
iex(1)> multi_dim_array = [ [1,2,3], [4,5,6]]
[[1, 2, 3], [4, 5, 6]]
iex(2)> Enum.at(multi_dim_array, 1)
[4, 5, 6]
iex(3)> Enum.at(multi_dim_array, 1) |> Enum.at(2)
6


除算と余りの二つの書き方
iex(2)> div(10,2)
5
iex(3)> div 10,2
5
iex(4)> div(10,2)
5
iex(5)> rem(10,3)
1
iex(6)> rem 10, 3
1

匿名関数を呼びさすときに'.'を入れるのを忘れずに
iex(1)> add = fn a,b -> a+b end
#Function<12.90072148/2 in :erl_eval.expr/5>
iex(2)> is_function(add)
true
iex(3)> is_function(add,2)
true
iex(4)> is_function(add,1)
false
iex(5)> add.(1,2)
3
iex(7)> add_two = fn a -> add.(a,2) end
#Function<6.90072148/1 in :erl_eval.expr/5>
iex(8)> add_two.(2)
4


Folds(reduces) the given list 
to the left with a function,
Requires an accumulator.
foldl(list, acc, function)のような書き方、例
iex(2)> List.foldl([1,2,3,4], 0, fn (x, acc) -> x + acc end)
10
iex(3)> List.foldl([1,2,3,4], 0, fn (x, acc) -> x - acc end)
2

iex(1)> dict = %{a: 1, b: 2}
%{a: 1, b: 2}
iex(2)> Enum.map(dict, fn{k,v} -> {k, v*2} end)
[a: 2, b: 4]


渡されたリストのすべての要素に対して、
関数で評価した後に
返した結果はtrueであればtrueを返す
iex(1)> Enum.all?([2,4,6], fn(x) -> rem(x, 2) == 0 end)
true
iex(2)> Enum.all?([2,3,6], fn(x) -> rem(x, 2) == 0 end)
false


渡されたリストのすべての要素に対して、
関数で評価した後に
一つで評価がtrueであれば、
返す結果がtrueである。
iex(1)> Enum.any?([2,4,6], fn(x) -> rem(x, 2) == 1 end)
false
iex(2)> Enum.any?([2,3,6], fn(x) -> rem(x, 2) == 1 end)
true


リストの四つ目の要素を取り出せないのでnilを返す
iex(1)> Enum.at([2,4,6], 3)
nil
iex(2)> Enum.at([2,4,6], 2)
6
５つ目の要素が取り出せないので、
デフォルトの:noneを返す
四つ目の要素はデフォルト値
iex(3)> Enum.at([2,4,6], 4, :none)
:none

drop(collection, count)
Enum.drop()のcountは負の数であれば、
末尾からcount個の要素を削除
iex(1)> Enum.drop([1,2,3], 2)
[3]
iex(2)> Enum.drop([1,2,3], 10)
[]
iex(3)> Enum.drop([1,2,3], -2)
[1]


reduce(collection, fun)
reduce(collection, acc, fun)
accがない場合は、リストの最初の値をaccとして設定される
iex(1)> Enum.reduce([1,2,3,4], fn(x, acc) -> x*acc end)
24
iex(2)> Enum.reduce([1,2,3,4], 10, fn(x, acc) -> x*acc end)
240


Elixir's Range is a stream
Stream are composable, lazy enumerables.
Any enumerable that generates items one by one
during enumeration is called a stream.
iex(1)> range = 1..5
1..5
iex(2)> Enum.map range, &(&1 * 2)
[2, 4, 6, 8, 10]


delete(keywords, key)
Deletes the entries in the 
keyword list for a specific key
If the key does not exist, 
returns the keyword list unchanged
iex(14)> Keyword.delete([a: 1, b: 2], :a)
[b: 2]
iex(15)> Keyword.delete([a: 1, b: 2, c: 3], :a)
[b: 2, c: 3]
iex(16)> Keyword.delete([b: 2], :a)
[b: 2]

All of the Erlang built-ins reside 
in the ':erlang' module
Since Erlang modules are 
represented by atoms, you may invoke Erlang
functions in Elixir as follows:
iex(1)> :lists.sort [3,4,1]
[1, 3, 4]

There are two anchors 
are '\b' and '\B', which 
stand for a "word boundary"
and "non-word boundary" 
iex(3)> Regex.match?(~r/\bmet/, "Wear your helmet when bicycling")
false
iex(4)> Regex.match?(~r/\bmet/, "Our metropolitan life")
true


To create a new dict, use the 'new' 
fucntions defined by each dict type
iex(9)> dict = HashDict.new
#HashDict<[]>
iex(10)> dict = HashDict.put(dict, :hello, :world)
#HashDict<[hello: :world]>
iex(11)> dict[:hello]
:world


into(collection, list)
into(collection, list, transform)
Inserts the given enumerable into a 
collectable according to the 
transformation function
iex(12)> Enum.into([1,2,3], [0])
[0, 1, 2, 3]
iex(13)> Enum.into([a: 1, b: 2], %{})
%{a: 1, b: 2}
iex(14)> Enum.into([2,3], [3], fn x -> x * 3 end)
[3, 6, 9]


Elixir provides macros as a 
mechanism for meta-programming
Macros are chunks of code that 
executed and expanded at compilation time.
in order to use a macro, we 
need to guarantee its module and implementation
are available during compilation. 
The is done with the 'require' directive
iex(1)> Integer.odd?(3)
** (CompileError) iex:1: you must require Integer before invoking the macro Integer.odd?/1
    (elixir) src/elixir_dispatch.erl:107: :elixir_dispatch.dispatch_require/6
iex(1)> require Integer
nil
iex(2)> Integer.odd?(3)
true


The majority of the functions 
in the File moudle expects 
paths as arguments.
Most commonly, those paths will 
be binaries and they can be manipulated 
with the Path module
iex(3)> Path.join("foo", "bar")
"foo/bar"
iex(4)> Path.expand("~/hello")
"/Users/wang/hello"


StringIO module provides an 
IO device that wraps a string
二つ目のreadに注意,
３文字しかないので、
５文字は読み取れない
iex(5)> {:ok, pid} = StringIO.open("abcdefg")
{:ok, #PID<0.60.0>}
iex(6)> IO.read(pid, 4)
"abcd"
iex(7)> IO.read(pid, 5)
"efg"


String moudle
Convert all characters on the 
given string to uppercase
upcase(binary)
iex(8)> String.upcase("abcd")
"ABCD"
iex(9)> String.upcase("ab 123 xpto")
"AB 123 XPTO"
iex(10)> String.upcase("こんにちは")
"こんにちは"


strip(string, char)
Returns a string where 
leading/traillingchar have been removed
iex(11)> String.strip("  abc  ")
"abc"
iex(12)> String.strip("a  abc  a", ?a)
"  abc  "


iex> Enum.map [2,4,6], fn val -> val * val end
[4,16,36]
上の表現のと下は一緒で
iex(2)> square = fn val -> val * val end
#Function<6.90072148/1 in :erl_eval.expr/5>
iex(3)> Enum.map [2,4,6], square
[4, 16, 36]


'?x' returns the integer character code for x
so '?0' is 48


All the functions in the 'Enum' 
module are eager.  Many functions 
expect an enumerable and return a list back
iex(6)> odd? = &(rem(&1, 2) != 0)
#Function<6.90072148/1 in :erl_eval.expr/5>
iex(7)> Enum.filter(1..3, odd?)
[1, 3]
This means that when performing 
multiple operations with 'Enum'
each operation is going to 
generate an intermediate list until
we reach the result
iex(8)> 1..100_000 |> Enum.map(&(&1*3)) |> Enum.filter(odd?) |> Enum.sum
7500000000
Instead of generating intermediate lists, streams create a series of 
computations that are invoded only when we pass it to the Enum modules
Streams are useful when working with large, possible infinite, collections
iex(9)> 1..100_000 |> Stream.map(&(&1*3)) |> Stream.filter(odd?) |> Enum.sum
7500000000


Streams are lazy, composable enumerables
They are lazy because, as shown 
in the example, it returns 
a data type, an actual stream, 
that represents the map computation 
over the range 1..100_000
iex(10)> 1..100_000 |> Enum.map(&(&1*3))
[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60,
 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114,
 117, 120, 123, 126, 129, 132, 135, 138, 141, 144, 147, 150, ...]
iex(11)> 1..100_000 |> Stream.map(&(&1*3))
#Stream<[enum: 1..100000, funs: [#Function<37.75994740/1 in Stream.map/2>]]>


Stream.cycle/1 can be used to 
create a stream that cycles
a given enumerable infinitely.
Be careful to not call a function like
Enum.map/2 on such streams, as they would 
cycle forever
iex(12)> stream = Stream.cycle([1,2,3])
#Function<15.75994740/2 in Stream.cycle/1>
iex(13)> Enum.take(stream, 10)
[1, 2, 3, 1, 2, 3, 1, 2, 3, 1]


Elixir provides agents which are simple abstractions
around state:
iex(14)> {:ok, pid} = Agent.start_link(fn -> %{} end)
{:ok, #PID<0.73.0>}
iex(15)> Agent.update(pid, fn map -> Map.put(map, :hello, :world) end)
:ok
iex(17)> Agent.get(pid, fn map -> Map.get(map, :hello) end)
:world


Char lists and binary
iex(18)> is_binary "hello"
true
iex(19)> is_list "hello"
false
iex(20)> is_list 'hello'
true


We started an agent with an initial
state of an empty list. Next, we issue
a commonad to update the state, adding 
our new item to the head of the list.
Finally, we retrieved the whole list.
Once we are done with the agent, we
can call Agent.stop/1 to terminate the
agent process.
iex> {:ok, agent} = Agent.start_link fn -> [] end
{:ok, #PID<0.57.0>}
iex> Agent.update(agent, fn list -> ["eggs"|list] end)
:ok
iex> Agent.get(agent, fn list -> list end)
["eggs"]
iex> Agent.stop(agent)
:ok


Matching works because structs stores a 
field named __struct__ inside the map
iex(6)> defmodule User do
...(6)>   defstruct name: "join", age: 27
...(6)> end
{:module, User,
 <<70, 79, 82, 49, 0, 0, 5, 8, 66, 69, 65, 77, 69, 120, 68, 99, 0, 0, 0, 99, 131, 104, 2, 100, 0, 14, 101, 108, 105, 120, 105, 114, 95, 100, 111, 99, 115, 95, 118, 49, 108, 0, 0, 0, 2, 104, 2, ...>>,
 [name: "join", age: 27]}
iex(8)> join = %User{}
%User{age: 27, name: "join"}
iex(9)> %User{name: name} = join
%User{age: 27, name: "join"}
iex(10)> name
"join"
iex(11)> join.__struct__
User


Besides regular expressions, 
'~s' sigil is used to generate string, 
similar to double quotes.
'~c' is used to generate char lists
'~w' sigil is used to generate a list of
words separated by white space
iex(12)> ~s(this is a string with "quotes")
"this is a string with \"quotes\""
iex(13)> ~c(this is a string with "quotes")
'this is a string with "quotes"'
iex(14)> ~w(foo bar bat)
["foo", "bar", "bat"]

rm!(Path.t) :: :ok | no_return
Same as 'rm/1', but raises an exception
in case of failure. Otherwise:ok!
iex(1)> File.rm('test')
:ok
iex(2)> File.rm('test')
{:error, :enoent}
iex(3)> File.rm!('test2')
:ok
iex(4)> File.rm!('test2')
** (File.Error) could not remove file test2: no such file or directory
    (elixir) lib/file.ex:697: File.rm!/1


Returns true if the path is a regular file
iex(2)> File.regular?('TestDir')
false
iex(4)> File.regular?('test')
true


with_index(Enumerable.t):: Enumerable.t
Creates a stream where each item in the enumerable
will be wrapped in a tuple alongside its index
iex(6)> stream = Stream.with_index([3,4,5])
#Stream<[enum: [3, 4, 5],
 funs: [#Function<45.75994740/1 in Stream.with_index/1>]]>
iex(7)> Enum.to_list(stream)
[{3, 0}, {4, 1}, {5, 2}]



String.split(string, pattern, options \\ [])
iex(8)> String.split("a,b,c", ",")
["a", "b", "c"]
iex(9)> String.split("a,b,c", ",", parts:2)
** (SyntaxError) iex:9: keyword argument must be followed by space after: parts:

iex(9)> String.split("a,b,c", ",", parts: 2)
["a", "b,c"]
iex(10)> String.split(" a b c ", " ", trim:true)
** (SyntaxError) iex:10: keyword argument must be followed by space after: trim:

iex(10)> String.split(" a b c ", " ", trim: true)
["a", "b", "c"]
