ubuntu(32bit)にElixirをインストール
下のレポジトリを/etc/apt/sources.listファイルに追加
deb http://packages.erlang-solutions.com/ubuntu trusty contrib
deb http://packages.erlang-solutions.com/ubuntu saucy contrib
deb http://packages.erlang-solutions.com/ubuntu precise contrib
下のコマンドでerlang 17もインストールされる。
# aptitude update
# aptitude install elixir


Comprehensionsはgenerators, filters, collectables
三つの要素で構成されている
iex(11)> for n <- [1,2,3,4], do: n*n
[1, 4, 9, 16]
iex(12)> for n <- 1..4, do: n*n
[1, 4, 9, 16]


Regular expressions
iex(1)> regex = ~r/foo|bar/
~r"foo|bar"
iex(2)> "foo" =~ regex
true
iex(3)> "bar" =~ regex
true
iex(4)> "bat" =~ regex
false
iex(5)>

spawnされたプロセスは関数を実行して，
実行終了したら，プロセスもexit
iex(1)> pid = spawn fn -> 1+2 end
#PID<0.43.0>
iex(2)> Process.alive?(pid)
false
iex(3)>

defstructを使って，structを作ることができる

iex(1)> defmodule User do
...(1)>   defstruct name: "join", age: 27
...(1)> end

'instances'を生成するには%User{}を使う
iex(2)> %User{}
%User{age: 27, name: "join"}
iex(3)> %User{name: "meg"}
%User{age: 27, name: "meg"}
iex(6)> is_map(%User{})
true


iex(7)> join = %User{}
%User{age: 27, name: "join"}
iex(8)> join.name
"join"
iex(9)> join.age
27

megはjoinというインスタンスをアップデートした
iex(10)> meg = %User{join | name: "meg"}
%User{age: 27, name: "meg"}
iex(11)> meg.name
"meg"
iex(12)> join.name
"join"


無名関数,('.'に注意)
iex(1)> square = fn(x) -> x*x end
#Function<6.106461118/1 in :erl_eval.expr/5>
iex(2)> square.(5)
25
