今回一番新しいバージョンのpostgresqlをインストールするため
まずhttp://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/　にアクセスしてパッケージの名前を確かめる
依存関係が存在するため，下のコマンドと逆の順番でインストールしようとしたらエラーが表示され，
必要なパッケージ名が提示される．

# yum install http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/postgresql93-libs-9.3.5-1PGDG.rhel6.x86_64.rpm

# yum install http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/postgresql93-9.3.5-1PGDG.rhel6.x86_64.rpm

# yum install http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/postgresql93-server-9.3.5-1PGDG.rhel6.x86_64.rpm

# service postgresql-9.3 initdb

これでpostgresqlが初めて使えるようになる．

# psql --version
psql (PostgreSQL) 9.3.5

vagrant環境でインストール直後デフォルトのDBを一覧を表示したいとき, エラーが表示される
vagrant@localhost:~/Projects/Web-Programming/Postgresql$ psql -l
psql: FATAL:  role "vagrant" does not exist

なので，vagrantというユーザをpostgresqlに作成する
vagrant@localhost:~/Projects/Web-Programming/Postgresql$ sudo -u postgres createuser vagrant

これで $ psql -l コマンドでDBを表示できるようになる．


vagrantユーザーでpostgresデータベースに入って，now()関数を使って時間を表示させる
vagrant@localhost:~$ psql -d postgres -U vagrant
psql (9.3.5)
Type "help" for help.

postgres=> select now();
              now
-------------------------------
2014-07-26 16:12:48.878849+00
(1 row)


postgresユーザでログインして，vagrantユーザーにデータベースを作る権限を付与する．
vagrant@localhost:~$ sudo su - postgres
-bash-4.1$ psql
psql (9.3.5)
Type "help" for help.

postgres=# ALTER USER vagrant CREATEDB;
ALTER ROLE

blogappというDBにpostsという名前のテーブルをmyposts名前にへんこする
名前が変わってることは\dtで確認
blogapp=> alter table posts rename to myposts;
ALTER TABLE
blogapp=> \dt
List of relations
Schema |  Name   | Type  |  Owner
--------+---------+-------+---------
public | myposts | table | vagrant
(1 row)


postgresqlのデータの型に
realとserialは実数と連番


「id serial」などは一意に決まるものなので，primary keyとしてあげればOK
blogapp=> create table posts (
blogapp(> id serial primary key
blogapp(> );
CREATE TABLE

